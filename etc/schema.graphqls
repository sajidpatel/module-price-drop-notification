type Mutation {
    subscribeToPriceDropNotification(
        product_id: Int!
    ): PriceDropNotificationSubscriptionOutput @resolver(class: "SajidPatel\\PriceDropNotification\\Model\\Resolver\\SubscribeToPriceDropNotification")

    unsubscribeFromPriceDropNotification(
        notification_id: Int!
    ): PriceDropNotificationUnsubscribeOutput @resolver(class: "SajidPatel\\PriceDropNotification\\Model\\Resolver\\UnsubscribeFromPriceDropNotification")
}

type Query {
    customerPriceDropNotifications: [PriceDropNotification] @resolver(class: "SajidPatel\\PriceDropNotification\\Model\\Resolver\\CustomerPriceDropNotifications")
}

type PriceDropNotification {
    id: Int!
    product: ProductInterface!
    created_at: String!
}

type PriceDropNotificationSubscriptionOutput {
    success: Boolean!
    message: String!
}

type PriceDropNotificationUnsubscribeOutput {
    success: Boolean!
    message: String!
}

interface ProductInterface {
    id: Int!
    name: String!
    sku: String!
    price_range: PriceRange!
    price_drop_notification_enabled: Boolean!
}

type PriceRange {
    minimum_price: Price!
    maximum_price: Price!
}

type Price {
    regular_price: Money!
    final_price: Money!
}

type Money {
    value: Float!
    currency: String!
}

type Mutation {
    toggleCustomerPriceDropNotificationOptOut(
        opt_out: Boolean!
    ): CustomerPriceDropNotificationOptOut @resolver(class: "SajidPatel\\PriceDropNotification\\Model\\Resolver\\TogglePriceDropNotificationOptOut")
}

type CustomerPriceDropNotificationOptOut {
    customer_id: Int!
    opted_out: Boolean!
}

type Customer {
    price_drop_notification_opt_out: Boolean @resolver(class: "SajidPatel\\PriceDropNotification\\Model\\Resolver\\GetCustomerPriceDropNotificationOptOut")
}